depeg

=== priorization ===
- staking nft
- api

=== backlog ===
staking
- add inspect_registry to deploy_depeg (shows registered tokens + instances)
- add inspect_staking to deploy_depeg (shows registered bundles, stakes, stakers)
- stop rewards once bundle lifetime is exceeded

investing/riskpool
- ok for now

mumbay
- price generator script
  + stable: rand .9955 - 1.02
  + trigger: 1x at 0.995, then rand 0.98 ,- .998
  + depeg: 1x .97, 1x.93, backdate triggered at, 1x.88
- fastapi server
- dockerfile

product
- figure out how to assess balance for account at depeg time (after the fact)
- claim payout
  + withdrawal period
  + policy considered expired after withdrawal  period
  + policy holder to actively withraw payout per/from protected wallet
  + token balance at block timestamp
  + withdrawPayout

=== done 6.1.23 ===
- failure mode testing for staking target handling

=== done 6.1.23 ===
- new unified staking api (separate bookkeeping for stakes and rewards, support more than bundles)
- begin of substantial refactoring

=== done 5.1.23 ===
- locking period for staking
- syncs /w marc, add wallet address attribute
- wfp syncs, csi ws prep call

=== done 4.1.23 ===
- remove hard link between staking and capability to sell policies
  + if staking is not high enough only webui should block, not contract
  + staking webui should show delta between capacity and staking support (and visual cue for "understaked" bundles)
- big cleanup after refactoring

=== done 3.1.23 ====
- add onlyowner for updateinstance/updateToken
- split staking into registry and staking

=== done 30.12.22
- split into registry and staking
  + replace gif staking stuff with link to new registry
- add bundleRegistry

=== done 22/23.12.22 ===
- add bundle name/lifetime to staking

=== done 21.12.22 ===
- instance name attribute
- split into registry and staking
  + factor out instance registry

=== done 20.12.22 ===
- bundle lifetime attribute
- bundle name attribute

=== done 18/19.12.22 ===
- store depeg price
- testnet functions
  + subtract24hFromTriggeredAt
  + reactivate

--
target -> object

general
- upgradability
- path from upgradable to frozen
- star model (1 global registry, n side chain registries)

object registry
- has owner
- scope:global/sidechain
- responsibilities
  + registration of objects
  + manage objects
  + cross-chain object state replication

staking (mainnet only)
  + allows to stake/unstake for/from approved objects
  + distribution of rewards to stakers
  + slashing of stakes/rewards from stakers

object
- id
- name
- type: chain, registry, protocol, token, instance, component, bundle
- contractAddress
- chainId
- state: proposed, rejected, approved, suspended, archived
- stakable: yes/no (ie chain, token not stakable)
- unstakable: yes/no (ie chain, token not unstakable)
- stakes
- capitalSupport(token)

object type
- chain
- token
- protocol
- registry (has owner) 1 per sidechain /w >= 1 instance
  + global: n side chain registries
  + side chain: 1 global registry
- instance (has operator) 0..n per chain
- component (has owner) 2..n per instance (2: at least 1 product, 1 riskpool)
- bundle (has investor, via nft) 1..n per rikspool
